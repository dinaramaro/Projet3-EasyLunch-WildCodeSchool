{"ast":null,"code":"import _objectSpread from \"/home/dina/Projet-3/bordeaux-0918-js-easylunch/front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar initialState = {\n  questions: []\n};\n\nvar fetchFAQ = function fetchFAQ() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var newState;\n\n  switch (action.type) {\n    case 'FETCH_FAQ_BEGIN':\n      newState = _objectSpread({}, state, {\n        loading: true,\n        error: null\n      });\n      return newState;\n\n    case 'FETCH_FAQ_SUCCESS':\n      newState = _objectSpread({}, state, {\n        loading: false,\n        questions: action.items\n      });\n      return newState;\n\n    case 'FETCH_FAQ_ERROR':\n      newState = _objectSpread({}, state, {\n        loading: false,\n        error: action.error,\n        questions: []\n      });\n      return newState;\n\n    default:\n      return state;\n  }\n};\n\nexport default fetchFAQ;","map":{"version":3,"sources":["/home/dina/Projet-3/bordeaux-0918-js-easylunch/front/src/reducers/fetchFAQ.js"],"names":["initialState","questions","fetchFAQ","state","action","newState","type","loading","error","items"],"mappings":";AAAA,IAAMA,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE;AADQ,CAArB;;AAIA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBH,YAAyB;AAAA,MAAXI,MAAW;AACjD,MAAIC,QAAJ;;AACA,UAAQD,MAAM,CAACE,IAAf;AACE,SAAK,iBAAL;AACED,MAAAA,QAAQ,qBACHF,KADG;AAENI,QAAAA,OAAO,EAAE,IAFH;AAGNC,QAAAA,KAAK,EAAE;AAHD,QAAR;AAKA,aAAOH,QAAP;;AACF,SAAK,mBAAL;AACEA,MAAAA,QAAQ,qBACHF,KADG;AAENI,QAAAA,OAAO,EAAE,KAFH;AAGNN,QAAAA,SAAS,EAAEG,MAAM,CAACK;AAHZ,QAAR;AAKA,aAAOJ,QAAP;;AACF,SAAK,iBAAL;AACEA,MAAAA,QAAQ,qBACHF,KADG;AAENI,QAAAA,OAAO,EAAE,KAFH;AAGNC,QAAAA,KAAK,EAAEJ,MAAM,CAACI,KAHR;AAINP,QAAAA,SAAS,EAAE;AAJL,QAAR;AAMA,aAAOI,QAAP;;AACF;AACE,aAAOF,KAAP;AAxBJ;AA0BD,CA5BD;;AA8BA,eAAeD,QAAf","sourcesContent":["const initialState = {\n  questions: [],\n};\n\nconst fetchFAQ = (state = initialState, action) => {\n  let newState;\n  switch (action.type) {\n    case 'FETCH_FAQ_BEGIN':\n      newState = {\n        ...state,\n        loading: true,\n        error: null,\n      };\n      return newState;\n    case 'FETCH_FAQ_SUCCESS':\n      newState = {\n        ...state,\n        loading: false,\n        questions: action.items,\n      };\n      return newState;\n    case 'FETCH_FAQ_ERROR':\n      newState = {\n        ...state,\n        loading: false,\n        error: action.error,\n        questions: [],\n      };\n      return newState;\n    default:\n      return state;\n  }\n};\n\nexport default fetchFAQ;\n"]},"metadata":{},"sourceType":"module"}